###
Main controller for Sheriff
- controls routing + sets the headers for  $xhr for Rails
###
Sheriff.controllers.SheriffController = ($xhr, $route, $routeParams )->
  self = @
  Sheriff.sheriffController = self
  $xhr.defaults.headers.post['Content-Type'] = 'application/json'
  $xhr.defaults.headers.put['Content-Type'] = 'application/json'

  # assumes the presence of jQuery
  token = $("meta[name='csrf-token']").attr("content")
  $xhr.defaults.headers.post['X-CSRF-Token'] = token;
  $xhr.defaults.headers.put['X-CSRF-Token'] = token;
  $xhr.defaults.headers['delete']['X-CSRF-Token'] = token;

  ## set the default routes for all Rails resources
  <% Sheriff::EXPOSED_MODELS.map{|x| x[:model].pluralize.downcase}.each do |m| %>
  <% full_controller = "Sheriff.controllers.#{m.humanize}Controller" %>
  $route.when('/<%= m %>',
      {template: '<%= asset_path("#{m}/all.html") %>', controller: <%= full_controller %> });
  # $route.when('/<%= m %>/show/:<%= m.singularize %>_id',
  #     {template: '<%= asset_path("#{m}/show.html") %>', controller: <%= full_controller %> });
  <% end %>

  $route.otherwise({redirectTo: '/deputies'});
  $route.parent(@);

Sheriff.controllers.SheriffController.$inject = ['$xhr', '$route', '$routeParams'];


###
Provides basic structure for RESTful interaction and workflow.
If you want to extend the functionality of this generated code, use the prototype
for this controller function.
  e.g
  Sherriff.controllers.AlertsController::say_hello = (name)->
    console.log "Hello #{name}"

and call then in your templates
###

<% Sheriff::EXPOSED_MODELS.each do |model_config| %>
  <% model  = model_config[:model]  %>
  <% models = model.pluralize %>
Sheriff.controllers.<%= models.humanize %>Controller = ($xhr, $routeParams, $location, models)->
  self = @
  ## expose instances for better debugging in console
  Sheriff.<%= models.downcase  %>Controller = self
  Sheriff.models = models

  # store the reference on self
  self.$xhr         = $xhr
  self.$location    = $location
  self.$routeParams = $routeParams
  self.queryParam   = ""

  # defaults for objects
  self.currentAction = null
  self.currentObject = null
  self.perPage       = <%= model_config[:per_page] %>
  self.<%= models.downcase %> = []

  self.index = ()->
    self.page = parseInt($routeParams.page)
    self.page = 1 if isNaN(self.page)
    self.currentAction = 'index'

    # $xhr('GET', "/<%= models.downcase %>?page=#{self.page}&per_page=#{self.perPage}", (code, response)->
    #   self.<%= models.downcase %> = TAFFY(response)
    # )
      #$("#loading").remove();


    models.<%= models %>.index({page: self.page}, (response)->
      self.<%= models.downcase %> = TAFFY(response)
    )

  self.show = (object)->
    currentId = parseInt($routeParams.id)
    object ?= self.<%= models.downcase %>.filter( (e)->
      e.<%= model.downcase %>.id == currentId
    )[0]
    object ?= models.<%= models %>.get(id: currentId)
    console.log(object)
    self.currentObject = object;
    self.currentAction = 'show'

  self.edit = ()->
    currentId = parseInt($routeParams.id)
    object ?= self.<%= models.downcase %>.filter( (e)->
      e.<%= model.downcase %>.id == currentId
    )[0]
    object ?= models.<%= models %>.get(id: currentId)
    console.log(object)
    self.currentObject = object;
    self.currentAction = 'edit'

  if ($location.hash)
    switch $routeParams.action
      when 'index' then self.index()
      when 'show' then  self.show()
      when 'edit' then  self.edit()
      else self.index() # default

  ## helper methods for view
  self.prevUrl = ()->
    "#/<%= models.downcase %>?page=#{self.page-1}"

  self.nextUrl = ()->
    "#/<%= models.downcase %>?page=#{self.page+1}"

  self.goBack = ()->
    window.history.back()


  ## code for debugging, disable later...
  # self.$on( '$afterRouteChange', ()->
  #   console.log('afterRouteChange')
  #   console.log($routeParams)
  # )

  # self.$on('$beforeRouteChange', ()->
  #   console.log("beforeRouteChange")
  #   console.log($routeParams)
  # )

  ## return self, needs to be last
  self
## initialize the controller with needed services
Sheriff.controllers.<%= models %>Controller.$inject = ['$xhr', '$routeParams', '$location', 'models'];

<% end %>

