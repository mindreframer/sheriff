###
Main controller for Sheriff
- controls routing + sets the headers for  $xhr for Rails
###

Sheriff.controllers.SheriffController = ($xhr, $route, $routeParams )->
  self = @
  Sheriff.sheriffController = self
  $xhr.defaults.headers.post['Content-Type'] = 'application/json'
  $xhr.defaults.headers.put['Content-Type'] = 'application/json'

  # assumes the presence of jQuery
  token = $("meta[name='csrf-token']").attr("content")
  $xhr.defaults.headers.post['X-CSRF-Token'] = token;
  $xhr.defaults.headers.put['X-CSRF-Token'] = token;
  $xhr.defaults.headers['delete']['X-CSRF-Token'] = token;

  ## set the default routes for all Rails resources
  <% Sheriff::EXPOSED_MODELS.map{|x| x[:model].pluralize.downcase}.each do |m| %>
  <% full_controller = "Sheriff.controllers.#{m.humanize}Controller" %>
  $route.when('/<%= m %>',
      {template: '<%= asset_path("#{m}/all.html") %>', controller: <%= full_controller %> });
  # $route.when('/<%= m %>/show/:<%= m.singularize %>_id',
  #     {template: '<%= asset_path("#{m}/show.html") %>', controller: <%= full_controller %> });
  <% end %>

  $route.otherwise({redirectTo: '/deputies'});
  $route.parent(@);

Sheriff.controllers.SheriffController.$inject = ['$xhr', '$route', '$routeParams'];


###
Provides basic structure for RESTful interaction and workflow.
If you want to extend the functionality of this generated code, use the prototype
for this controller function.
  e.g
  Sherriff.controllers.AlertsController::say_hello = (name)->
    console.log "Hello #{name}"

and call then in your templates
###

<% Sheriff::EXPOSED_MODELS.each do |model_config| %>
  <% model  = model_config[:model]  %>
  <% models = model.pluralize %>
  <% controller = "Sheriff.controllers.#{models.humanize}Controller" %>
<%= controller %>= ($xhr, $routeParams, $location, models)->
  self = @
  ## expose instances for better debugging in console
  Sheriff.<%= models.downcase  %>Controller = self
  # all resources for REST
  Sheriff.models = models

  # store the reference on self
  self.$xhr         = $xhr
  self.$location    = $location
  self.$routeParams = $routeParams
  self.queryParam   = ""
  # for debugging
  self.__name       = '<%= "#{models.humanize}Controller" %>'

  # defaults for objects
  self.currentAction = null
  self.currentObject = null
  self.perPage       = <%= model_config[:per_page] %>
  @<%= models.downcase %> = null
  @log("initializing...")


  if ($location.hash)
    switch $routeParams.action
      when 'index' then self.index()
      when 'show' then  self.show()
      when 'edit' then  self.edit()
      else self.index() # default

  ## return self, needs to be last
  self

<%= controller %>::index = ()->
    @page = parseInt(@$routeParams.page)
    @page = 1 if isNaN(@page)
    @currentAction = 'index'

    ## load the inital json
    Sheriff.models.<%= models %>.index({page: @page, per_page: @perPage}, (response)=>
      @<%= models.downcase %> = TAFFY(response)
    )

<%= controller %>::show = (object)->
    @currentObject = @loadCurrentObject(object, @$routeParams);
    @currentAction = 'show'

<%= controller %>::edit = ()->
    @currentObject = @loadCurrentObject(null,   @$routeParams);
    @currentAction = 'edit'

<%= controller %>::loadCurrentObject = (object, params)->
    currentId = parseInt(@$routeParams.id)
    object ?= Sheriff.models.<%= models %>.get(id: currentId)

<%= controller %>::update = (object)->
    @log "UPDATING <%= model %>:#{object.id}"
    object.$save({},
      (e)=>
        @log 'save was ok'
        @log(e)
        @goBack()
      (e)=>
        @log 'an error accured while saving!'
        @log(e)
    )

## helper methods for view
<%= controller %>::completeUrl= (params)->
    "#/<%= models.downcase %>?#{@buildUrl(params)}"

<%= controller %>::buildUrl = (params)->
    angular.toKeyValue(params)

<%= controller %>::prevUrl = ()->
    params      = angular.copy(@$routeParams)
    params.page = @page - 1
    @completeUrl(params)

<%= controller %>::nextUrl = ()->
    params      = angular.copy(@$routeParams)
    params.page = @page + 1
    @completeUrl(params)

<%= controller %>::editUrl = (object)->
    @completeUrl(id: object.id, action: 'edit')

<%= controller %>::destroyUrl = (object)->
    @completeUrl(id: object.id, action: 'destroy')

<%= controller %>::goBack = ()->
    window.history.back()


<%= controller %>::log = (msg)->
    return unless Sheriff.enableLogging
    if angular.isString(msg)
      console.log "#{@__name}: #{msg}"
    else
      console.log "#{@__name}: *********** "
      console.log msg

## initialize the controller with needed services
Sheriff.controllers.<%= models %>Controller.$inject = ['$xhr', '$routeParams', '$location', 'models'];

<% end %>


## here custom extensions for controllers
# Sheriff.controllers.DeputiesController::update = (object)->
#   console.log "KINDA updating #{object.id}"
#   @goBack()

Sheriff.controllers.AlertsController::edit = ()->
  Sheriff.models.Alerts.get( id:@$routeParams.id , (response)=>
    @log response
    @currentObject = response
  )
  @currentAction = 'edit'
